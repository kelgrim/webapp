package ekn.learning.webapp.repos;

import static ekn.learning.webapp.helpers.TestHelper.compareMessage;
import static ekn.learning.webapp.helpers.TestHelper.getTestMessage;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.List;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import ekn.learning.webapp.exceptions.MessageInvalidArgumentsException;
import ekn.learning.webapp.exceptions.MessageNotFoundException;
import ekn.learning.webapp.exceptions.MessageNotFoundForUserException;
import ekn.learning.webapp.model.Message;

@SpringBootTest
public class MessageJdbcRepositoryTest {

	//Note that these tests rely on the data generated by
	//the data.sql in src/main/resources
	
	@Autowired
	private MessageJdbcRepository repository;

	@Test
	public void findMessageById_returnMessage(){
		Message testMessage = repository.findMessageById(1);
		boolean result = compareMessage(getTestMessage(), testMessage, false);
		assertTrue(result);
	}
	
	@Test
	public void findMessageById_throwException() {
		assertThrows(MessageNotFoundException.class, () -> {repository.findMessageById(99901);} );
	}
	
	
	@Test
	public void getUserInbox_returnList() {
		List<Message> list = repository.getUserInbox(3);
		assertEquals(2,list.size());
	}
	
	@Test
	public void getUserInbox_throwError() {
		assertThrows(MessageNotFoundForUserException.class, () -> {repository.getUserInbox(99901);} );
	}
	
	@Test
	public void getUserSentMessages_returnList() {
		List<Message> list = repository.getUserSentMessages(3);
		assertEquals(3,list.size());
	}
	
	@Test
	public void getUserSentMessage_throwException() {
		assertThrows(MessageNotFoundForUserException.class, () -> {repository.getUserSentMessages(99901);} );
	}
		
	@Test
	public void insertMessage_returnInt() {
		Message testMsg = new Message();
		testMsg.setMessageText("TestMessage for unit test");
		testMsg.setSenderId(2);
		testMsg.setRecipientId(1);
		
		int result = repository.insertMessage(testMsg);
		assertTrue(result>0);
	}
	
	@Test //
	public void insertMessage_throwException() {
		assertThrows(MessageInvalidArgumentsException.class, () -> {repository.insertMessage(new Message());} );
	}
	
	@Test 
	public void insertMessage_throwExceptionTwo() {
		Message testMsg = new Message();
		testMsg.setMessageText("TestMessage for unit test insertMessage_throwExceptionTwo");
		testMsg.setSenderId(99901);
		testMsg.setRecipientId(1);
		assertThrows(MessageInvalidArgumentsException.class, () -> {repository.insertMessage(testMsg);} );
		
	}
	
	@Test 
	public void insertMessage_throwExceptionThree() {
		Message testMsg = new Message();
		testMsg.setMessageText("TestMessage for unit test insertMessage_throwExceptionThree()");
		testMsg.setSenderId(1);
		testMsg.setRecipientId(99901);
		assertThrows(MessageInvalidArgumentsException.class, () -> {repository.insertMessage(testMsg);} );
	}
	
	@Test
	public void deleteMessage_returnInt() {
		Message testMsg = new Message();
		testMsg.setMessageText("TestMessage for unit test");
		testMsg.setSenderId(2);
		testMsg.setRecipientId(1);
		
		int messageToDelete = repository.insertMessage(testMsg);
		
		int result = repository.deleteMessage(messageToDelete);
		
		assertTrue(result>0);
	}
	
	@Test
	public void deleteMessage_throwException() {
		assertThrows(MessageNotFoundException.class, () -> {repository.deleteMessage(99901);});
	}
	
	@Test
	public void updateMessage_returnMessage() {
		Message testMsg = new Message();
		testMsg.setMessageText("TestMessage for unit test");
		testMsg.setSenderId(2);
		testMsg.setRecipientId(1);
		
		Message updateMsg = new Message();
		updateMsg.setMessageText("TestMessage for unit test update");
		updateMsg.setSenderId(3);
		updateMsg.setRecipientId(2);
		
		int messageToUpdateId = repository.insertMessage(testMsg);
		updateMsg.setId(messageToUpdateId);
		int updateResultInt = repository.updateMessage(messageToUpdateId, updateMsg);
		Message actualUpdatedMessage = repository.findMessageById(messageToUpdateId);
		repository.deleteMessage(messageToUpdateId);
		
		assertTrue(updateResultInt > 0);
		assertTrue(compareMessage(updateMsg, actualUpdatedMessage, false));
		
	}
	
	@Test
	public void updateMessage_throwNotFoundException() {
		assertThrows(MessageNotFoundException.class, () -> {repository.updateMessage(999999, getTestMessage());});
	}
	
	@Test
	public void updateMessage_throwIllegalArgument() {
		assertThrows(MessageInvalidArgumentsException.class, () -> {repository.updateMessage(1, new Message());});
	}
	
}
